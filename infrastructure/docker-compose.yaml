# ========================================================
# Diploma Project - Docker Compose Configuration
# ========================================================

networks:
  monitoring:
    driver: bridge
    name: project-monitoring
  kafka-net:
    driver: bridge
    name: project-kafka
  app-net:
    driver: bridge
    name: project-app

volumes:
  kafka-data:
    name: project-kafka-data
  zookeeper-data:
    name: project-zookeeper-data
  zookeeper-logs:
    name: project-zookeeper-logs
  prometheus-data:
    name: project-prometheus-data
  grafana-data:
    name: project-grafana-data
  loki-data:
    name: project-loki-data
  jaeger-data:
    name: project-jaeger-data

services:
  # ========================================================
  # Infrastructure Services
  # ========================================================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: project-zookeeper
    restart: unless-stopped
    networks: [kafka-net]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_DATA_LOG_DIR: /var/lib/zookeeper/log
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: project-kafka
    restart: unless-stopped
    networks: [kafka-net, monitoring, app-net]
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Single-node configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Topic defaults
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance tuning
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_BATCH_SIZE: 16384
      KAFKA_LINGER_MS: 5
      # JMX
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ========================================================
  # Monitoring Services
  # ========================================================

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: project-prometheus
    restart: unless-stopped
    networks: [monitoring, app-net]
    ports: ["9090:9090"]
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus-data:/prometheus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: project-alertmanager
    restart: unless-stopped
    networks: [monitoring]
    ports: ["9093:9093"]
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    depends_on:
      prometheus:
        condition: service_healthy

  grafana:
    image: grafana/grafana:11.0.0
    container_name: project-grafana
    restart: unless-stopped
    networks: [monitoring]
    ports: ["3000:3000"]
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_LOG_LEVEL: warn
      GF_FEATURE_TOGGLES_ENABLE: tracing
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      jaeger:
        condition: service_healthy

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    container_name: project-kafka-exporter
    restart: unless-stopped
    networks: [kafka-net, monitoring]
    ports: ["9308:9308"]
    command:
      - "--kafka.server=kafka:29092"
      - "--web.listen-address=0.0.0.0:9308"
      - "--log.level=warn"
    depends_on:
      kafka:
        condition: service_healthy

  # ========================================================
  # Application Services
  # ========================================================

  producer-service:
    build:
      context: ../services/producer-service
      dockerfile: Dockerfile
    image: diploma-producer-service:latest
    container_name: diploma-producer-service
    restart: unless-stopped
    networks: [kafka-net, monitoring, app-net]
    ports:
      - "8081:8080"
      - "9091:9090"
    environment:
      # Kafka
      KAFKA_BROKER_LIST: kafka:29092
      KAFKA_TOPIC: events
      # Server
      SERVER_ADDRESS: ":8080"
      SERVER_READ_TIMEOUT: 15s
      SERVER_WRITE_TIMEOUT: 15s
      SERVER_IDLE_TIMEOUT: 60s
      # Metrics
      METRICS_ENABLED: "true"
      METRICS_PORT: ":9090"
      METRICS_PATH: "/metrics"
      # OpenTelemetry Configuration
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_SERVICE_NAME: producer-service
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=producer-service,service.version=1.0.0,deployment.environment=development"
      # Tracing
      TRACING_ENABLED: "true"
      TRACING_ENDPOINT: http://otel-collector:4317
      TRACING_SAMPLE_RATE: "1.0"
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      LOG_OUTPUT: stdout
      LOG_CORRELATION_ENABLED: "true"
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consumer-service:
    build:
      context: ../services/consumer-service
      dockerfile: Dockerfile
    image: diploma-consumer-service:latest
    container_name: diploma-consumer-service
    restart: unless-stopped
    networks: [kafka-net, monitoring, app-net]
    ports: ["9094:9090"]
    environment:
      # Kafka
      KAFKA_BROKER_LIST: kafka:29092
      KAFKA_TOPIC: events
      KAFKA_GROUP_ID: consumer-service
      KAFKA_MIN_BYTES: 10000
      KAFKA_MAX_BYTES: 10485760
      KAFKA_MAX_WAIT: 100ms
      KAFKA_COMMIT_INTERVAL: 5s
      KAFKA_START_OFFSET: latest
      KAFKA_MAX_RETRIES: 3
      KAFKA_RETRY_BACKOFF: 50ms
      # Consumer
      CONSUMER_WORKER_COUNT: 10
      CONSUMER_BATCH_SIZE: 100
      CONSUMER_PROCESS_TIMEOUT: 10s
      CONSUMER_RETRY_ATTEMPTS: 3
      CONSUMER_RETRY_DELAY: 100ms
      # OpenTelemetry Configuration
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_SERVICE_NAME: consumer-service
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=consumer-service,service.version=1.0.0,deployment.environment=development"
      # Tracing
      TRACING_ENABLED: "true"
      TRACING_ENDPOINT: http://otel-collector:4317
      TRACING_SAMPLE_RATE: "1.0"
      # Metrics
      METRICS_ENABLED: "true"
      METRICS_PORT: ":9090"
      METRICS_PATH: "/metrics"
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      LOG_OUTPUT: stdout
      LOG_CORRELATION_ENABLED: "true"
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================================
  # Initialization
  # ========================================================

  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    container_name: diploma-kafka-init
    networks: [kafka-net]
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        echo 'Creating Kafka topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic events-dlq
        echo 'Topics created successfully!'
      "
    restart: "no"
