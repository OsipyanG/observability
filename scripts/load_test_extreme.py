#!/usr/bin/env python3
"""
Extreme Load Testing Script for Maximum RPS
Optimized for MacBook M3 Pro with 18GB RAM
"""

import json
import random
import string
from locust import HttpUser, task, between, events
from locust.runners import MasterRunner


class ExtremePerfUser(HttpUser):
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ RPS"""
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    wait_time = between(0.001, 0.005)
    
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection_timeout = 5.0
    network_timeout = 5.0
    
    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"""
        # –ü—Ä–µ–¥–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.user_ids = [random.randint(1, 1000000) for _ in range(1000)]
        self.data_templates = [
            "User {} registered",
            "User {} updated profile", 
            "User {} logged in",
            "User {} made purchase",
            "User {} viewed product"
        ]
        self.counter = 0
    
    @task(10)
    def create_user_event_fast(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π - 95% –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = self.user_ids[self.counter % len(self.user_ids)]
        template = self.data_templates[self.counter % len(self.data_templates)]
        
        payload = {
            "data": template.format(user_id)
        }
        
        self.counter += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        with self.client.post("/api/v1/events/user", 
                             json=payload, 
                             catch_response=True,
                             timeout=2) as response:
            if response.status_code >= 400:
                response.failure(f"HTTP {response.status_code}")
    
    @task(1)
    def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è - 5% –∑–∞–ø—Ä–æ—Å–æ–≤"""
        with self.client.get("/health", 
                           catch_response=True,
                           timeout=1) as response:
            if response.status_code != 200:
                response.failure(f"Health check failed: {response.status_code}")


@events.init.add_listener
def on_locust_init(environment, **kwargs):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if isinstance(environment.runner, MasterRunner):
        print("üöÄ Extreme Performance Mode Activated")
        print("üìä Target: Maximum RPS on MacBook M3 Pro")


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class ExtremePerfConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è MacBook M3 Pro
    RECOMMENDED_USERS = 20000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    RECOMMENDED_SPAWN_RATE = 2000  # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    @staticmethod
    def get_optimal_settings():
        return {
            "users": ExtremePerfConfig.RECOMMENDED_USERS,
            "spawn_rate": ExtremePerfConfig.RECOMMENDED_SPAWN_RATE,
            "run_time": "300s",  # 5 –º–∏–Ω—É—Ç
            "host": "http://localhost:8081"
        }


if __name__ == "__main__":
    print("üî• Extreme Performance Load Test Configuration")
    print("=" * 50)
    config = ExtremePerfConfig.get_optimal_settings()
    for key, value in config.items():
        print(f"  {key}: {value}")
    print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é extreme_load_test.sh") 