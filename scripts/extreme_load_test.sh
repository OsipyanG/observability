#!/bin/bash

# Extreme Load Test Script - Maximum RPS for MacBook M3 Pro
set -e

echo "üî• EXTREME Load Test - Maximum RPS"
echo "=================================="
echo "üñ•Ô∏è  Target: MacBook M3 Pro (18GB RAM)"
echo "üéØ Goal: Maximum possible RPS"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
CURRENT_ULIMIT=$(ulimit -n)
if [ "$CURRENT_ULIMIT" -lt 65536 ]; then
    echo "‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤: $CURRENT_ULIMIT"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/optimize_macos.sh"
    echo "‚ùå –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ulimit -n 65536"
    exit 1
fi
echo "‚úÖ File descriptors: $CURRENT_ULIMIT"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
AVAILABLE_MEMORY=$(sysctl -n hw.memsize)
AVAILABLE_GB=$((AVAILABLE_MEMORY / 1024 / 1024 / 1024))
echo "‚úÖ Available memory: ${AVAILABLE_GB}GB"

if [ "$AVAILABLE_GB" -lt 16 ]; then
    echo "‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 16GB RAM –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ RPS"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
if ! curl -s http://localhost:8081/health > /dev/null; then
    echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8081"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make up"
    exit 1
fi
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º locust
if ! command -v locust &> /dev/null; then
    echo "‚ùå Locust –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pipx install locust"
    exit 1
fi
echo "‚úÖ Locust –¥–æ—Å—Ç—É–ø–µ–Ω"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOCUST_FILE="$SCRIPT_DIR/load_test_extreme.py"

if [[ ! -f "$LOCUST_FILE" ]]; then
    echo "‚ùå –§–∞–π–ª –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOCUST_FILE"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR="extreme_results_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RESULTS_DIR"

echo ""
echo "üöÄ EXTREME PERFORMANCE SETTINGS:"
echo "üë• Users: 20,000 (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
echo "‚ö° Spawn rate: 2,000 users/sec"
echo "‚è±Ô∏è  Duration: 5 minutes"
echo "üéØ Expected RPS: 15,000-30,000+"
echo "üìÅ Results: $RESULTS_DIR"
echo ""

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!"
echo "   - –ú–æ–∂–µ—Ç –Ω–∞–≥—Ä–µ—Ç—å MacBook"
echo "   - –ú–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
echo "   - –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π"
echo ""

read -p "ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω"
    exit 1
fi

echo "üî• –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
echo "üìä –ö–æ–º–∞–Ω–¥–∞: locust --headless --users 20000 --spawn-rate 2000 --run-time 300s"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
locust \
    --headless \
    --users 20000 \
    --spawn-rate 2000 \
    --run-time 300s \
    --host http://localhost:8081 \
    --locustfile "$LOCUST_FILE" \
    --html "$RESULTS_DIR/extreme_report.html" \
    --csv "$RESULTS_DIR/extreme_results" \
    --only-summary \
    --logfile "$RESULTS_DIR/locust.log" \
    --loglevel INFO

LOCUST_EXIT_CODE=$?

echo ""
echo "üèÅ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $RESULTS_DIR/"
echo "üìä HTML –æ—Ç—á–µ—Ç: $RESULTS_DIR/extreme_report.html"
echo "üìã –õ–æ–≥–∏: $RESULTS_DIR/locust.log"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
if [[ -f "$RESULTS_DIR/extreme_results_stats.csv" ]]; then
    echo ""
    echo "üî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:"
    echo "=================================="
    tail -n 1 "$RESULTS_DIR/extreme_results_stats.csv" | awk -F',' '
    {
        if ($1 == "Aggregated") {
            printf "  üéØ Total Requests: %s\n", $3
            printf "  ‚ùå Failed: %s (%.2f%%)\n", $4, ($4/$3)*100
            printf "  ‚ö° Average Response: %sms\n", $6
            printf "  üöÄ Peak RPS: %s\n", $10
            printf "  üìà 95th percentile: %sms\n", $8
        }
    }'
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    TOTAL_REQUESTS=$(tail -n 1 "$RESULTS_DIR/extreme_results_stats.csv" | cut -d',' -f3)
    RPS=$(tail -n 1 "$RESULTS_DIR/extreme_results_stats.csv" | cut -d',' -f10)
    
    echo ""
    echo "üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:"
    if (( $(echo "$RPS > 10000" | bc -l) )); then
        echo "üèÜ –û–¢–õ–ò–ß–ù–û! RPS > 10,000 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    elif (( $(echo "$RPS > 5000" | bc -l) )); then
        echo "‚úÖ –•–û–†–û–®–û! RPS > 5,000 - –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    elif (( $(echo "$RPS > 1000" | bc -l) )); then
        echo "‚ö†Ô∏è  –°–†–ï–î–ù–ï! RPS > 1,000 - –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
    else
        echo "‚ùå –ù–ò–ó–ö–û! RPS < 1,000 - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    fi
    
else
    echo "‚ö†Ô∏è  –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    ls -la "$RESULTS_DIR/" || echo "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
fi

echo ""
echo "üí° –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:"
echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ scripts/performance.env"
echo "   2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ Kafka –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
echo "   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Go (pprof)"
echo "   4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Grafana"

exit $LOCUST_EXIT_CODE 